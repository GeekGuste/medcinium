/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import javax.swing.JOptionPane;
import javax.swing.ListSelectionModel;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.TableModel;
import models.Allergy;
import models.Drug;
import models.PatientInfo;
import models.dao.DAOFactory;

/**
 *
 * @author otm
 */
public class InsertingIntoDB extends javax.swing.JFrame implements ListSelectionListener{

    
    /**
     * Creates new form InsertingIntoDB
     */
    Drug drug;
    PatientInfo info;
    Allergy allergy;
    public InsertingIntoDB() {
        
        
        
        initComponents();
        
        update.setEnabled(false);
        delete.setEnabled(false);
        infos.setModel(TableModelBuilder.buildDBinfosTableModel(DAOFactory.getPatientInfoDAO().all()));
        drugs.setModel(TableModelBuilder.buildDBdrugsTableModel(DAOFactory.getDrugDAO().all()));
        allergies.setModel(TableModelBuilder.buildDBAllergiesTableModel(DAOFactory.getAllergyDAO().all()));
         ListSelectionModel selectionModelDrugs = drugs.getSelectionModel();
        ListSelectionModel selectionModelInfos = infos.getSelectionModel();
        ListSelectionModel selectionModelAllergies = allergies.getSelectionModel();
        selectionModelDrugs.addListSelectionListener(this);
        selectionModelInfos.addListSelectionListener(this);
        selectionModelAllergies.addListSelectionListener(this);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        choice = new javax.swing.JComboBox();
        text = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        allergies = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        infos = new javax.swing.JTable();
        jScrollPane3 = new javax.swing.JScrollPane();
        drugs = new javax.swing.JTable();
        addButton = new javax.swing.JButton();
        update = new javax.swing.JButton();
        delete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("medcinium");
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        choice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Medicament", "Allergie", "Info" }));

        allergies.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "Allergie"
            }
        ));
        jScrollPane1.setViewportView(allergies);

        infos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "Infos"
            }
        ));
        jScrollPane2.setViewportView(infos);

        drugs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Num", "medicament"
            }
        ));
        jScrollPane3.setViewportView(drugs);

        addButton.setText("Ajouter");
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        update.setText("modifier");
        update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateActionPerformed(evt);
            }
        });

        delete.setText("supprimer");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 210, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14))
            .addGroup(layout.createSequentialGroup()
                .addGap(164, 164, 164)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(addButton)
                        .addGap(18, 18, 18)
                        .addComponent(update))
                    .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, 158, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(delete)
                    .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(77, 77, 77)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(choice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(text, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addButton)
                            .addComponent(update)
                            .addComponent(delete))
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(28, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        
        drug= new Drug();
        info= new PatientInfo();
        allergy= new Allergy();
        drugs.clearSelection();
        
        if(!text.getText().equalsIgnoreCase("")) {
        if(choice.getSelectedItem().toString().equalsIgnoreCase("Medicament"))
        {
            
            drug.setDrugName(text.getText());
            if(DAOFactory.getDrugDAO().create(drug)) {
                text.setText("");
                drugs.setModel(TableModelBuilder.buildDBdrugsTableModel(DAOFactory.getDrugDAO().all()));

            }
        }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Allergie")){
            allergy.setAllergyName(text.getText());
            if(DAOFactory.getAllergyDAO().create(allergy))
            {
                text.setText("");
                allergies.setModel(TableModelBuilder.buildDBAllergiesTableModel(DAOFactory.getAllergyDAO().all()));

            }
        }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Info")) {
            info.setProperty(text.getText());
            if(DAOFactory.getPatientInfoDAO().create(info)) {
                text.setText("");
                infos.setModel(TableModelBuilder.buildDBinfosTableModel(DAOFactory.getPatientInfoDAO().all()));

            }
        }
        }else {
            JOptionPane.showMessageDialog(this, "Le champ est vide", "Erreur", JOptionPane.ERROR_MESSAGE);        
            
        }
        
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        
        if(!text.getText().equalsIgnoreCase("")) {
        if(choice.getSelectedItem().toString().equalsIgnoreCase("Medicament"))
        {
            
            
            if(DAOFactory.getDrugDAO().delete(drug)) {
                text.setText("");
                try{
                drugs.setModel(TableModelBuilder.buildDBdrugsTableModel(DAOFactory.getDrugDAO().all()));
                }catch(Exception e){
                   allergies.repaint();
                }
            }
        }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Allergie")){
            if(DAOFactory.getAllergyDAO().delete(allergy))
            {
                text.setText("");
                 
                try {
                     allergies.setModel(TableModelBuilder.buildDBAllergiesTableModel(DAOFactory.getAllergyDAO().all()));

                }catch(Exception e){
                   allergies.repaint();
                }
                
            }
        }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Info")) {
            
            if(DAOFactory.getPatientInfoDAO().delete(info)) {
                text.setText("");
                try {
                infos.setModel(TableModelBuilder.buildDBinfosTableModel(DAOFactory.getPatientInfoDAO().all()));
                }catch(Exception e){
                   allergies.repaint();
                }
            }
        }
        }else {
            JOptionPane.showMessageDialog(this, "Le champ est vide", "Erreur", JOptionPane.ERROR_MESSAGE);        
            
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
       update.setEnabled(false);
        delete.setEnabled(false);
        choice.setEditable(true);
        text.setText("");
    }//GEN-LAST:event_formMouseClicked

    private void updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateActionPerformed
            if(!text.getText().equalsIgnoreCase("")) {
        if(choice.getSelectedItem().toString().equalsIgnoreCase("Medicament"))
        {
            
            drug.setDrugName(text.getText());
            if(DAOFactory.getDrugDAO().update(drug)) {
                text.setText("");
                drugs.setModel(TableModelBuilder.buildDBdrugsTableModel(DAOFactory.getDrugDAO().all()));

            }
        }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Allergie")){
            allergy.setAllergyName(text.getText());
            if(DAOFactory.getAllergyDAO().update(allergy))
            {
                text.setText("");
                allergies.setModel(TableModelBuilder.buildDBAllergiesTableModel(DAOFactory.getAllergyDAO().all()));

            }
        }else if(choice.getSelectedItem().toString().equalsIgnoreCase("Info")) {
            info.setProperty(text.getText());
            if(DAOFactory.getPatientInfoDAO().update(info)) {
                text.setText("");
                infos.setModel(TableModelBuilder.buildDBinfosTableModel(DAOFactory.getPatientInfoDAO().all()));

            }
        }
        }else {
            JOptionPane.showMessageDialog(this, "Le champ est vide", "Erreur", JOptionPane.ERROR_MESSAGE);        
            
        }
        
    }//GEN-LAST:event_updateActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(InsertingIntoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(InsertingIntoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(InsertingIntoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(InsertingIntoDB.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InsertingIntoDB().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JTable allergies;
    private javax.swing.JComboBox choice;
    private javax.swing.JButton delete;
    private javax.swing.JTable drugs;
    private javax.swing.JTable infos;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextField text;
    private javax.swing.JButton update;
    // End of variables declaration//GEN-END:variables

    @Override
    public void valueChanged(ListSelectionEvent e) {
        
        update.setEnabled(true);
        delete.setEnabled(true);
        if (e.getSource() == drugs.getSelectionModel() && e.getValueIsAdjusting()) {
            TableModel model = (TableModel)drugs.getModel();
            String num = String.valueOf(model.getValueAt(drugs.getSelectedRow(), 0));
            
           drug = DAOFactory.getDrugDAO().find(num);
           text.setText(drug.getDrugName());
           choice.setSelectedIndex(0);
           choice.setEditable(false);
           
        }
        
        if (e.getSource() == allergies.getSelectionModel() && e.getValueIsAdjusting()) {
            
            TableModel model = (TableModel)allergies.getModel();
            String num = String.valueOf(model.getValueAt(allergies.getSelectedRow(), 0));
           allergy = DAOFactory.getAllergyDAO().find(num);
           text.setText(allergy.getAllergyName());
           choice.setSelectedIndex(1);
           choice.setEditable(false);
           
           
        }
        
        if (e.getSource() == infos.getSelectionModel() && e.getValueIsAdjusting()) {
            
            TableModel model = (TableModel)infos.getModel();
            String num = String.valueOf(model.getValueAt(infos.getSelectedRow(), 0));
           info = DAOFactory.getPatientInfoDAO().findAlone(num);
           text.setText(info.getProperty());
           choice.setSelectedIndex(2);
           System.out.println("selected");
           choice.setEditable(false);
        }
    
    }
}
